name: Release on Master Branch

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  release:
    name: Create Tagged Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.1

      - name: Determine previous tag
        id: prev
        run: |
          set -euo pipefail
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            PREV_TAG=$(git describe --tags --abbrev=0)
          else
            PREV_TAG="0.0.0"
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV_TAG"

      - name: Compute next version (semantic)
        id: next
        run: |
          set -euo pipefail
          PREV_TAG="${{ steps.prev.outputs.prev_tag }}"
          RANGE="${PREV_TAG}..HEAD"
          if [ "$PREV_TAG" = "0.0.0" ]; then RANGE=""; fi

          COMMITS=$(git log --format=%s ${RANGE})

          LEVEL="patch"
          if echo "$COMMITS" | grep -E "^feat!|BREAKING CHANGE" >/dev/null; then
            LEVEL="major"
          elif echo "$COMMITS" | grep -E "^feat\b" >/dev/null; then
            LEVEL="minor"
          elif echo "$COMMITS" | grep -E "^fix\b|^perf\b|^refactor\b|^chore\b|^build\b|^ci\b|^docs\b|^style\b|^test\b" >/dev/null; then
            LEVEL="patch"
          fi

          # Allow manual override via commit footer 'release: major|minor|patch'
          if echo "$COMMITS" | grep -E "release: (major|minor|patch)" >/dev/null; then
            LEVEL=$(echo "$COMMITS" | grep -Eo "release: (major|minor|patch)" | tail -n1 | awk '{print $2}')
          fi

          # Strip 'v' prefix if present before parsing version numbers
          VERSION_NO_V=$(echo "$PREV_TAG" | sed 's/^v//')
          MAJOR=$(echo "$VERSION_NO_V" | cut -d. -f1)
          MINOR=$(echo "$VERSION_NO_V" | cut -d. -f2)
          PATCH=$(echo "$VERSION_NO_V" | cut -d. -f3)

          case "$LEVEL" in
            major)
              MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor)
              MINOR=$((MINOR+1)); PATCH=0 ;;
            patch)
              PATCH=$((PATCH+1)) ;;
          esac

          NEXT_TAG="${MAJOR}.${MINOR}.${PATCH}"
          echo "level=$LEVEL" >> $GITHUB_OUTPUT
          echo "next_tag=$NEXT_TAG" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_TAG ($LEVEL)"

      - name: Check if release is needed
        id: check
        run: |
          set -euo pipefail
          PREV_TAG="${{ steps.prev.outputs.prev_tag }}"
          NEXT_TAG="${{ steps.next.outputs.next_tag }}"
          
          if [ "$PREV_TAG" = "$NEXT_TAG" ]; then
            echo "No new commits since last release, skipping"
            echo "needs_release=false" >> $GITHUB_OUTPUT
          else
            echo "New release needed: $PREV_TAG -> $NEXT_TAG"
            echo "needs_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Update build.zig.zon version
        if: steps.check.outputs.needs_release == 'true'
        run: |
          set -euo pipefail
          NEXT_TAG="${{ steps.next.outputs.next_tag }}"
          sed -E -i "s/(\\.version = \"[0-9]+\\.[0-9]+\\.[0-9]+\")/\.version = \"${NEXT_TAG}\"/" build.zig.zon
          echo "Updated build.zig.zon to version ${NEXT_TAG}"
          git diff -- build.zig.zon || true

      - name: Commit version bump
        if: steps.check.outputs.needs_release == 'true'
        run: |
          set -euo pipefail
          NEXT_TAG="${{ steps.next.outputs.next_tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add build.zig.zon
          git commit -m "chore(release): v${NEXT_TAG}" || echo "No changes to commit"

      - name: Create and push tag
        if: steps.check.outputs.needs_release == 'true'
        run: |
          set -euo pipefail
          NEXT_TAG="${{ steps.next.outputs.next_tag }}"
          
          # Create and push tag
          git tag -a "v${NEXT_TAG}" -m "Release v${NEXT_TAG}" || echo "Tag exists"
          git push origin "v${NEXT_TAG}" || echo "Tag already pushed"

      - name: Push version bump commit
        if: steps.check.outputs.needs_release == 'true'
        run: |
          set -euo pipefail
          git push origin HEAD || echo "No changes to push"

      - name: Create GitHub Release
        if: steps.check.outputs.needs_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.next.outputs.next_tag }}
          name: hash-zig v${{ steps.next.outputs.next_tag }}
          body: |
            ## Release v${{ steps.next.outputs.next_tag }}
            
            Automated release for hash-zig.
            
            **Version:** v${{ steps.next.outputs.next_tag }}
            **Bump level:** ${{ steps.next.outputs.level }}
            
            ### Changes
            This release includes all commits since the previous release.
            
            ### Installation
            ```zig
            .{
                .name = .my_project,
                .version = "0.1.0",
                .dependencies = .{
                    .@"hash-zig" = .{
                        .url = "https://github.com/ch4r10t33r/hash-zig/archive/refs/tags/v${{ steps.next.outputs.next_tag }}.tar.gz",
                        .hash = "1220...", // Will be generated by zig build
                    },
                },
            }
            ```
            
            ### What's New
            - Hypercube parameters: 64 chains of length 8 (w=3)
            - Rust-compatible Poseidon2: width=16, external_rounds=8, internal_rounds=20, sbox_degree=3
            - SIMD optimizations for improved performance
            - Multiple implementation options (Optimized V2 and SIMD)
          draft: false
          prerelease: false
