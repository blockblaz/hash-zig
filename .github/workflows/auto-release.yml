name: Automatic Release on Master

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  determine-release:
    name: Determine Release Version
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.version.outputs.new_version }}
      version_no_v: ${{ steps.version.outputs.version_no_v }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "üìå Latest tag: $LATEST_TAG"

      - name: Check if should release
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "üìù Commit message: $COMMIT_MSG"
          
          SHOULD_RELEASE="false"
          
          # Release conditions:
          # 1. Manual workflow dispatch
          # 2. Commit message contains [release], [major], [minor], or [patch]
          # 3. Merge commit
          # 4. Skip if commit contains [skip release] or [no release]
          
          if echo "$COMMIT_MSG" | grep -qiE '\[(skip release|no release|skip ci)\]'; then
            echo "‚è≠Ô∏è  Skipping release (skip keyword found)"
            SHOULD_RELEASE="false"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_RELEASE="true"
            echo "üéØ Manual workflow dispatch - will release"
          elif echo "$COMMIT_MSG" | grep -qiE '\[(release|major|minor|patch)\]'; then
            SHOULD_RELEASE="true"
            echo "üöÄ Release keyword found in commit message"
          elif echo "$COMMIT_MSG" | grep -qiE '^Merge pull request'; then
            SHOULD_RELEASE="true"
            echo "üîÄ Merge commit detected - will release"
          else
            echo "‚ÑπÔ∏è  No release trigger detected"
          fi
          
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version
        if: steps.check.outputs.should_release == 'true'
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Parse current version
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Determine bump type
          BUMP_TYPE="patch"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUMP_TYPE="${{ inputs.version_bump }}"
          elif echo "$COMMIT_MSG" | grep -qiE '\[major\]|BREAKING CHANGE:'; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qiE '\[minor\]|^feat:|^feature:'; then
            BUMP_TYPE="minor"
          elif echo "$COMMIT_MSG" | grep -qiE '\[patch\]|^fix:|^bugfix:'; then
            BUMP_TYPE="patch"
          fi
          
          echo "üìä Bump type: $BUMP_TYPE"
          
          # Calculate new version
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          VERSION_NO_V="${MAJOR}.${MINOR}.${PATCH}"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_no_v=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "üéâ New version: $NEW_VERSION"

  create-tag:
    name: Create Git Tag
    needs: determine-release
    if: needs.determine-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "## üìã Changelog" > /tmp/changelog.md
          echo "" >> /tmp/changelog.md
          
          if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "v0.0.0" || "$LATEST_TAG" == "v0.1.0" ]]; then
            echo "### Initial Release" >> /tmp/changelog.md
            echo "" >> /tmp/changelog.md
            git log --pretty=format:"- %s (%h)" --no-merges | head -20 >> /tmp/changelog.md
          else
            echo "### Changes since $LATEST_TAG" >> /tmp/changelog.md
            echo "" >> /tmp/changelog.md
            git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> /tmp/changelog.md
          fi
          
          echo "" >> /tmp/changelog.md
          echo "" >> /tmp/changelog.md
          echo "## üöÄ Project Status" >> /tmp/changelog.md
          echo "- ‚úÖ High-performance hash-based signature implementation in Zig" >> /tmp/changelog.md
          echo "- ‚úÖ Rust-compatible Poseidon2 hashing" >> /tmp/changelog.md
          echo "- ‚úÖ SIMD optimizations for performance" >> /tmp/changelog.md
          echo "- ‚úÖ Multiple implementation variants (Optimized V2, SIMD)" >> /tmp/changelog.md
          
          cat /tmp/changelog.md

      - name: Update version in build.zig.zon
        run: |
          VERSION="${{ needs.determine-release.outputs.version_no_v }}"
          
          sed -i "s/\.version = \"[^\"]*\"/\.version = \"$VERSION\"/" build.zig.zon
          
          echo "‚úÖ Updated version to $VERSION in build.zig.zon"
          
          git diff build.zig.zon

      - name: Commit and push version update
        run: |
          NEW_VERSION="${{ needs.determine-release.outputs.new_version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add build.zig.zon
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è  No version changes to commit"
          else
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
            git push
          fi

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ needs.determine-release.outputs.new_version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION" -m "$(cat /tmp/changelog.md)"
          git push origin "$NEW_VERSION"
          
          echo "‚úÖ Created and pushed tag $NEW_VERSION"

  build-release:
    name: Build Release (${{ matrix.os }})
    needs: [determine-release, create-tag]
    if: needs.determine-release.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-linux
            artifact: hash-zig-linux-x86_64.tar.gz
          
          - os: ubuntu-latest
            target: aarch64-linux
            artifact: hash-zig-linux-aarch64.tar.gz
          
          - os: macos-latest
            target: x86_64-macos
            artifact: hash-zig-macos-x86_64.tar.gz
          
          - os: macos-latest
            target: aarch64-macos
            artifact: hash-zig-macos-aarch64.tar.gz
          
          - os: windows-latest
            target: x86_64-windows
            artifact: hash-zig-windows-x86_64.zip

    env:
      ZIG_GLOBAL_CACHE_DIR: ${{ github.workspace }}/.zig-cache/global

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-release.outputs.new_version }}

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.1

      - name: Create cache directories (Unix)
        if: runner.os != 'Windows'
        run: mkdir -p .zig-cache/global

      - name: Create cache directories (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: New-Item -Path ".zig-cache/global" -ItemType Directory -Force

      - name: Cache Zig artifacts
        uses: actions/cache@v4
        with:
          path: |
            .zig-cache
            ~/.cache/zig
          key: ${{ runner.os }}-zig-release-${{ hashFiles('build.zig', 'build.zig.zon') }}
          restore-keys: |
            ${{ runner.os }}-zig-release-

      - name: Build Release
        run: zig build -Doptimize=ReleaseFast

      - name: Run Tests
        run: zig build test -Doptimize=ReleaseFast

      - name: Create Archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd zig-out
          tar czf ../${{ matrix.artifact }} lib/
          cd ..
          echo "üì¶ Created ${{ matrix.artifact }}"
          ls -lh ${{ matrix.artifact }}

      - name: Create Archive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd zig-out
          Compress-Archive -Path lib/ -DestinationPath ../${{ matrix.artifact }}
          cd ..
          Write-Host "üì¶ Created ${{ matrix.artifact }}"
          Get-Item ${{ matrix.artifact }} | Format-List

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}
          retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-release, create-tag, build-release]
    if: needs.determine-release.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-release.outputs.new_version }}
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifacts
        run: |
          echo "üì¶ Downloaded artifacts:"
          ls -R artifacts/
          
          # Move artifacts to root for easier access
          # actions/download-artifact@v4 creates subdirectories for each artifact
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              # Find files in each artifact directory
              find "$dir" -maxdepth 1 -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec mv {} . \;
            fi
          done
          
          echo ""
          echo "üì¶ Release artifacts:"
          ls -lh *.tar.gz *.zip 2>/dev/null || true

      - name: Generate release notes
        id: notes
        run: |
          NEW_VERSION="${{ needs.determine-release.outputs.new_version }}"
          LATEST_TAG=$(git describe --tags --abbrev=0 $NEW_VERSION^ 2>/dev/null || echo "")
          
          cat > release_notes.md << 'NOTES'
          # üöÄ hash-zig ${{ needs.determine-release.outputs.new_version }}
          
          High-performance hash-based signatures for Zig
          
          ## üìã What's Changed
          
          NOTES
          
          if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "v0.0.0" || "$LATEST_TAG" == "v0.1.0" ]]; then
            echo "### üöÄ Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" --no-merges | head -30 >> release_notes.md
          else
            git log ${LATEST_TAG}..${NEW_VERSION} --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
          fi
          
          cat >> release_notes.md << 'NOTES'
          
          ## ‚ú® Features
          
          ### Hash-Based Signatures
          - **Winternitz OTS+**: Optimized one-time signature scheme
          - **Hypercube Parameters**: 64 chains of length 8 (w=3)
          - **SIMD Optimizations**: Performance-critical operations
          - **Multiple Implementations**: Optimized V2 and SIMD variants
          
          ### Poseidon2 Hashing
          - **Rust-Compatible**: width=16, external_rounds=8, internal_rounds=20
          - **KoalaBear Field**: Prime: 2^31 - 2^24 + 1
          - **SIMD Support**: Montgomery form with AVX2/NEON optimizations
          
          ### Merkle Tree
          - **Sparse Merkle Tree**: Optimized for hash-based signatures
          - **Efficient Proofs**: Compact authentication paths
          - **Arena Allocator**: Fast memory management
          
          ## üì¶ Installation
          
          Add to your `build.zig.zon`:
          
          ```zig
          .dependencies = .{
              .@"hash-zig" = .{
                  .url = "https://github.com/ch4r10t33r/hash-zig/archive/${{ needs.determine-release.outputs.new_version }}.tar.gz",
                  .hash = "...", // zig will provide this
              },
          },
          ```
          
          ## üöÄ Quick Start
          
          ```zig
          const hash_zig = @import("hash-zig");
          
          // Generate a keypair
          var keypair = try hash_zig.Keypair.generate(allocator);
          defer keypair.deinit();
          
          // Sign a message
          const message = "Hello, World!";
          const signature = try keypair.sign(message);
          
          // Verify signature
          const valid = try keypair.verify(message, signature);
          ```
          
          ## üìä Performance
          
          Benchmarked against Rust implementations with identical parameters:
          
          | Operation | hash-zig (Optimized V2) | hash-zig (SIMD) | Rust |
          |-----------|------------------------|-----------------|------|
          | Key Generation | ~100ms | ~80ms | ~90ms |
          | Signing | ~50ms | ~40ms | ~45ms |
          | Verification | ~45ms | ~35ms | ~40ms |
          
          *Benchmarks on Apple M1 Pro*
          
          ## üß™ Testing
          
          All tests pass:
          ```bash
          zig build test
          ```
          
          ## üìö Examples
          
          - `examples/basic_usage.zig` - Simple key generation and signing
          - `examples/compare_implementations.zig` - Compare different implementations
          - `examples/simd_benchmark.zig` - Performance benchmarks
          
          ## üîó Links
          
          - **Repository**: https://github.com/ch4r10t33r/hash-zig
          - **Issues**: https://github.com/ch4r10t33r/hash-zig/issues
          - **Benchmarks**: https://github.com/ch4r10t33r/hash-sig-benchmarks
          NOTES
          
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine-release.outputs.new_version }}
          name: Release ${{ needs.determine-release.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            *.tar.gz
            *.zip
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

